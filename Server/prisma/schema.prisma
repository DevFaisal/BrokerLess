// This is your Prisma schema file,
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  name        String
  email       String        @unique
  password    String
  phone       BigInt        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Agreement   Agreement[]
  UserAddress UserAddress[]
}

model Landlord {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  password        String
  phone           BigInt            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  properties      Property[]
  landlordaddress landlordaddress[]
}

model Property {
  id              String            @id @default(cuid())
  name            String
  description     String
  rent            Int
  landlordId      String
  status          String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  landlord        Landlord          @relation(fields: [landlordId], references: [id])
  addressId       String
  PropertyAddress PropertyAddress[]
  Agreement       Agreement[]
}

model PropertyAddress {
  id         String    @id @default(cuid())
  street     String
  city       String
  state      String
  zip        String
  country    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?
}

model UserAddress {
  id        String   @id @default(cuid())
  street    String
  city      String
  state     String
  zip       String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [tenantId], references: [id])
  tenantId  String?
}

model landlordaddress {
  id         String    @id @default(cuid())
  street     String
  city       String
  state      String
  zip        String
  country    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Landlord   Landlord? @relation(fields: [landlordId], references: [id])
  landlordId String?
}

model Agreement {
  id         String   @id @default(cuid())
  propertyId String
  tenantId   String
  status     Status   @default(INACTIVE)
  startDate  String //Change to Date later
  endDate    String //Change to Date later
  rent       Int
  createdAt  DateTime @default(now())
  Property   Property @relation(fields: [propertyId], references: [id])
  User       User     @relation(fields: [tenantId], references: [id])
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
  DECLINED
  APPROVED
  CANCELLED
}
